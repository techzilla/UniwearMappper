/**
 * BatchInventoryMapToBatch.java
 *
 * This file was generated by MapForce 2019.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package biz.uniwear.batch.mappings;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class BatchInventoryMapToBatch extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public main(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var2_NewStatement;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_Batch__batch__Instance, 1, "SELECT `gtin`, `brand`, `style_code`, `color_code`, `size_code`, `description_short`, `description_long`, CONVERT(`price`, CHAR(67)) AS `price`, `image_1`, `color_description`, `fit`, `gender`, CONVER"
 + "T(`weight`, CHAR(67)) AS `weight`, `stock`, `id` FROM `inventory`");
				com.altova.db.Dbs.prepareStatement(var2_NewStatement);
				current = (com.altova.db.Record)com.altova.functions.Core.first((new seq1_NewRecord(closure.var1_Batch__batch__Instance)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_NewRecord implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public seq1_NewRecord(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq1_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.addChildren(var2_NewRecord, "products|0", (new seq2_map(closure.var1_Batch__batch__Instance)));
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_map implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public seq2_map(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_map closure;
			IEnumerator var2_ReadRecordSet;
			com.altova.db.Record var3_NewRecord;
			com.altova.mapforce.IEnumerable var4_read_field;
			com.altova.mapforce.IEnumerable var5_read_field;
			java.lang.String var6_substring;
			com.altova.mapforce.IEnumerable var7_join;
			public Enumerator(seq2_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq3_NewQuery(closure.var1_Batch__batch__Instance))), (new seq4_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_ReadRecordSet.moveNext()) {state = 3; return false; }
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				var4_read_field = new com.altova.functions.Core.SequenceCache(com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "brand"));
				var5_read_field = new com.altova.functions.Core.SequenceCache(com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "size_code"));
				var6_substring = com.altova.functions.Core.substring("C:\\Users\\User\\Projects\\batch\\mappings\\project\\Mappings\\BatchToBatchProducts.mfd", com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.add(biz.uniwear.batch.mappings.core.get_position_of_last_delimiter.eval("C:\\Users\\User\\Projects\\batch\\mappings\\project\\Mappings\\BatchToBatchProducts.mfd", "/", "\\"), new java.math.BigDecimal("1"))), com.altova.CoreTypes.integerToDouble(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength("C:\\Users\\User\\Projects\\batch\\mappings\\project\\Mappings\\BatchToBatchProducts.mfd")))));
				var7_join = new com.altova.functions.Core.SequenceCache((new seq5_join(((com.altova.db.Record)(var2_ReadRecordSet.current())), var4_read_field, var5_read_field)));
				com.altova.db.Dbs.writeField(var3_NewRecord, "gtin", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "gtin"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "sku", (new seq6_join(((com.altova.db.Record)(var2_ReadRecordSet.current())), var4_read_field, var5_read_field)));
				com.altova.db.Dbs.writeField(var3_NewRecord, "name", var7_join);
				com.altova.db.Dbs.writeField(var3_NewRecord, "short_description", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "description_short"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "description", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "description_long"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "url_key", (new seq7_join(((com.altova.db.Record)(var2_ReadRecordSet.current())), var4_read_field, var5_read_field)));
				com.altova.db.Dbs.writeField(var3_NewRecord, "price", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "price"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "image", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "image_1"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "image_label", var7_join);
				com.altova.db.Dbs.writeField(var3_NewRecord, "product_online", com.altova.functions.Core.box(com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(new java.math.BigDecimal("1"))))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "visibility", com.altova.functions.Core.box("\"Not Visible Individually\""));
				com.altova.db.Dbs.writeField(var3_NewRecord, "attribute_set_code", com.altova.functions.Core.box("Default"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "additional_attribute_color", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "color_description"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "additional_attribute_size", var5_read_field);
				com.altova.db.Dbs.writeField(var3_NewRecord, "additional_attribute_fit", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "fit"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "additional_attribute_gender", (new seq8_map(((com.altova.db.Record)(var2_ReadRecordSet.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "additional_attribute_brand", var4_read_field);
				com.altova.db.Dbs.writeField(var3_NewRecord, "weight", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "weight"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "qty", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "stock"));
				com.altova.db.Dbs.writeField(var3_NewRecord, "source_input_name", com.altova.functions.Core.box(com.altova.functions.Core.substring(var6_substring, com.altova.CoreTypes.parseDouble("1"), com.altova.CoreTypes.decimalToDouble(com.altova.functions.Core.subtract(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(var6_substring)))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.functions.Core.stringLength(biz.uniwear.batch.mappings.core.get_fileext.eval(var6_substring))))))))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "source_input_id", com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "id"));
				current = var3_NewRecord;
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_ReadRecordSet != null ) { var2_ReadRecordSet.close(); var2_ReadRecordSet = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_ReadRecordSet != null ) { var2_ReadRecordSet.close(); var2_ReadRecordSet = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public seq3_NewQuery(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq3_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_Batch__batch__Instance, 1);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq4_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq4_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "gtin", 0);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "brand", 1);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "style_code", 2);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "color_code", 3);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "size_code", 4);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "description_short", 5);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "description_long", 6);
				com.altova.db.Dbs.read_String_ParseDecimal(var2_NewRecord, closure.var1_RecordSet, "price", 7);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "image_1", 8);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "color_description", 9);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "fit", 10);
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "gender", 11);
				com.altova.db.Dbs.read_String_ParseDecimal(var2_NewRecord, closure.var1_RecordSet, "weight", 12);
				com.altova.db.Dbs.read_int(var2_NewRecord, closure.var1_RecordSet, "stock", 13);
				com.altova.db.Dbs.read_int(var2_NewRecord, closure.var1_RecordSet, "id", 14);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq4_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{

		public seq4_NewRecord_lambda(){}
		
		public Object invoke(Object o) { return new seq4_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class seq5_join implements IEnumerable
	{
		com.altova.db.Record var1_cur;
		com.altova.mapforce.IEnumerable var2_read_field;
		com.altova.mapforce.IEnumerable var3_read_field;
	
		public seq5_join(com.altova.db.Record var1_cur, com.altova.mapforce.IEnumerable var2_read_field, com.altova.mapforce.IEnumerable var3_read_field)
		{
			this.var1_cur = var1_cur;
			this.var2_read_field = var2_read_field;
			this.var3_read_field = var3_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_join closure;
			IEnumerator var4_read_field;
			IEnumerator var5_read_field;
			IEnumerator var6_filter;
			IEnumerator var7_filter;
			public Enumerator(seq5_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var4_read_field = (closure.var2_read_field).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var4_read_field.moveNext()) {state = 3; return false; }
				var5_read_field = (com.altova.db.Dbs.readField(closure.var1_cur, "style_code")).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var4_read_field != null ) { var4_read_field.close(); var4_read_field = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var5_read_field.moveNext()) {state = 5; return false; }
				var6_filter = (com.altova.db.Dbs.readField(closure.var1_cur, "color_code")).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var5_read_field != null ) { var5_read_field.close(); var5_read_field = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var6_filter.moveNext()) {state = 7; return false; }
				if (!(com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(((java.lang.String)(var6_filter.current())))))) {state = 6; return false; }
				var7_filter = (closure.var3_read_field).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var7_filter.moveNext()) {state = 9; return false; }
				if (!(com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(com.altova.functions.Core.translate(((java.lang.String)(var7_filter.current())), ".", "_"))))) {state = 8; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat(((java.lang.String)(var4_read_field.current())), " "), com.altova.functions.Core.concat(com.altova.functions.Core.concat(((java.lang.String)(var5_read_field.current())), com.altova.functions.Core.concat("-", ((java.lang.String)(var6_filter.current())))), com.altova.functions.Core.concat("-", com.altova.functions.Core.translate(((java.lang.String)(var7_filter.current())), ".", "_"))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				if( var5_read_field != null ) { var5_read_field.close(); var5_read_field = null; }
				if( var4_read_field != null ) { var4_read_field.close(); var4_read_field = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_join implements IEnumerable
	{
		com.altova.db.Record var1_cur;
		com.altova.mapforce.IEnumerable var2_read_field;
		com.altova.mapforce.IEnumerable var3_read_field;
	
		public seq6_join(com.altova.db.Record var1_cur, com.altova.mapforce.IEnumerable var2_read_field, com.altova.mapforce.IEnumerable var3_read_field)
		{
			this.var1_cur = var1_cur;
			this.var2_read_field = var2_read_field;
			this.var3_read_field = var3_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_join closure;
			IEnumerator var4_read_field;
			IEnumerator var5_read_field;
			IEnumerator var6_filter;
			IEnumerator var7_filter;
			public Enumerator(seq6_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var4_read_field = (closure.var2_read_field).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var4_read_field.moveNext()) {state = 3; return false; }
				var5_read_field = (com.altova.db.Dbs.readField(closure.var1_cur, "style_code")).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var4_read_field != null ) { var4_read_field.close(); var4_read_field = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var5_read_field.moveNext()) {state = 5; return false; }
				var6_filter = (com.altova.db.Dbs.readField(closure.var1_cur, "color_code")).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var5_read_field != null ) { var5_read_field.close(); var5_read_field = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var6_filter.moveNext()) {state = 7; return false; }
				if (!(com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(((java.lang.String)(var6_filter.current())))))) {state = 6; return false; }
				var7_filter = (closure.var3_read_field).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var7_filter.moveNext()) {state = 9; return false; }
				if (!(com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(com.altova.functions.Core.translate(((java.lang.String)(var7_filter.current())), ".", "_"))))) {state = 8; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat(biz.uniwear.batch.mappings.vmf.vmf1_inputtoresult.eval(com.altova.functions.Lang.lowercase(((java.lang.String)(var4_read_field.current())))), "-"), com.altova.functions.Core.concat(com.altova.functions.Core.concat(((java.lang.String)(var5_read_field.current())), com.altova.functions.Core.concat("-", ((java.lang.String)(var6_filter.current())))), com.altova.functions.Core.concat("-", com.altova.functions.Core.translate(((java.lang.String)(var7_filter.current())), ".", "_"))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				if( var5_read_field != null ) { var5_read_field.close(); var5_read_field = null; }
				if( var4_read_field != null ) { var4_read_field.close(); var4_read_field = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_join implements IEnumerable
	{
		com.altova.db.Record var1_cur;
		com.altova.mapforce.IEnumerable var2_read_field;
		com.altova.mapforce.IEnumerable var3_read_field;
	
		public seq7_join(com.altova.db.Record var1_cur, com.altova.mapforce.IEnumerable var2_read_field, com.altova.mapforce.IEnumerable var3_read_field)
		{
			this.var1_cur = var1_cur;
			this.var2_read_field = var2_read_field;
			this.var3_read_field = var3_read_field;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_join closure;
			IEnumerator var4_read_field;
			IEnumerator var5_read_field;
			IEnumerator var6_filter;
			IEnumerator var7_filter;
			public Enumerator(seq7_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var4_read_field = (closure.var2_read_field).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var4_read_field.moveNext()) {state = 3; return false; }
				var5_read_field = (com.altova.db.Dbs.readField(closure.var1_cur, "style_code")).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var4_read_field != null ) { var4_read_field.close(); var4_read_field = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var5_read_field.moveNext()) {state = 5; return false; }
				var6_filter = (com.altova.db.Dbs.readField(closure.var1_cur, "color_code")).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var5_read_field != null ) { var5_read_field.close(); var5_read_field = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var6_filter.moveNext()) {state = 7; return false; }
				if (!(com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(((java.lang.String)(var6_filter.current())))))) {state = 6; return false; }
				var7_filter = (closure.var3_read_field).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var7_filter.moveNext()) {state = 9; return false; }
				if (!(com.altova.functions.Core.logicalNot(com.altova.functions.Lang.empty(com.altova.functions.Core.translate(((java.lang.String)(var7_filter.current())), ".", "_"))))) {state = 8; return false; }
				current = com.altova.functions.Core.translate(com.altova.functions.Lang.lowercase(com.altova.functions.Core.concat(com.altova.functions.Core.concat(((java.lang.String)(var4_read_field.current())), "/"), com.altova.functions.Core.concat(com.altova.functions.Core.concat(((java.lang.String)(var5_read_field.current())), com.altova.functions.Core.concat("-", ((java.lang.String)(var6_filter.current())))), com.altova.functions.Core.concat("-", com.altova.functions.Core.translate(((java.lang.String)(var7_filter.current())), ".", "_"))))), "!\"#$%&\'()*+,./:;<=>?@[\\]^`{|}~", "------------------------------");
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var7_filter != null ) { var7_filter.close(); var7_filter = null; }
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				if( var5_read_field != null ) { var5_read_field.close(); var5_read_field = null; }
				if( var4_read_field != null ) { var4_read_field.close(); var4_read_field = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_map implements IEnumerable
	{
		com.altova.db.Record var1_cur;
	
		public seq8_map(com.altova.db.Record var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_map closure;
			IEnumerator var2_read_field;
			public Enumerator(seq8_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_read_field = (com.altova.db.Dbs.readField(closure.var1_cur, "gender")).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_read_field.moveNext()) {state = 3; return false; }
				current = biz.uniwear.batch.mappings.vmf.vmf2_inputtoresult.eval(com.altova.functions.Lang.lowercase(((java.lang.String)(var2_read_field.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_read_field != null ) { var2_read_field.close(); var2_read_field = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_read_field != null ) { var2_read_field.close(); var2_read_field = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public Outer(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_Batch__batch__Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected java.sql.Connection varBatch2Instance;
		com.altova.db.TransactionHelper transactionHelper;


	// main entry point

	public void run(java.sql.Connection Batch2SourceConnection, java.sql.Connection BatchTargetConnection) throws Exception {
		// Open the source(s)
		writeTrace("Connecting to Batch2 database...\n");
			
		varBatch2Instance = Batch2SourceConnection;
		

		// Create the target

		writeTrace("Connecting to Batch database...\n");
		{

		// Execute mapping

		main mapping = new main(new com.altova.db.Catalog(varBatch2Instance, 60));

		writeDB(mapping, new com.altova.db.Catalog(BatchTargetConnection, 60, true));
		// Close the target
		}

		writeTrace("Closing " + BatchTargetConnection + ".\n");
		BatchTargetConnection.close();
		// Close the source
		com.altova.db.Dbs.closeConnection(varBatch2Instance);

		
		if (runDoesCloseAll)
		{
		}
	}


		static class Setup
		{
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
	
		public main(com.altova.db.Catalog var1_catalog)
		{
			this.var1_catalog = var1_catalog;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var2_NewStatement;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_catalog, 1, "INSERT INTO `products` (`gtin`, `sku`, `name`, `short_description`, `description`, `url_key`, `price`, `image`, `image_label`, `product_online`, `visibility`, `attribute_set_code`, `additional_attribu"
 + "te_color`, `additional_attribute_size`, `additional_attribute_fit`, `additional_attribute_gender`, `additional_attribute_brand`, `weight`, `qty`, `source_input_name`, `source_input_id`) VALUES (?, ?, "
 + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.DECIMAL,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.TINYINT,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.DECIMAL,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var2_NewStatement);
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class main_lambda implements com.altova.mapforce.SequenceFactory
	{

		public main_lambda(){}
		
		public Object invoke(Object o) { return new main((com.altova.db.Catalog) o); }	
	}
	
		}

		static void writeDB(com.altova.mapforce.IEnumerable mapping, com.altova.db.Catalog target) throws Exception
		{
			IEnumerator mappingEnumerator = mapping.enumerator();
			mappingEnumerator.moveNext();
			com.altova.db.Record record = (com.altova.db.Record) mappingEnumerator.current();

			Setup.main setup = 
				new Setup.main(target);
			setup.enumerator().moveNext();

			com.altova.db.TransactionHelper transactionHelper = 
				new com.altova.db.TransactionHelper(
					target.getConnection(), 
					"START TRANSACTION", 
					"COMMIT", 
					"ROLLBACK", 
					"SAVEPOINT  %%TRANSACTION_NAME%% ", 
					"ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
				);

					IEnumerator products_en = record.children.get("products|0").enumerator();
					while(products_en.moveNext())
						writeDB_products(record, (com.altova.db.Record) products_en.current(), target, transactionHelper);

		}

			static class Action_products
			{
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
		com.altova.db.Record var2_record;
	
		public main(com.altova.db.Catalog var1_catalog, com.altova.db.Record var2_record)
		{
			this.var1_catalog = var1_catalog;
			this.var2_record = var2_record;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var3_NewQuery;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
					case 32:	if (moveNext_32()) return true; break;
					case 33:	if (moveNext_33()) return true; break;
					case 34:	if (moveNext_34()) return true; break;
					case 35:	if (moveNext_35()) return true; break;
					case 36:	if (moveNext_36()) return true; break;
					case 37:	if (moveNext_37()) return true; break;
					case 38:	if (moveNext_38()) return true; break;
					case 39:	if (moveNext_39()) return true; break;
					case 40:	if (moveNext_40()) return true; break;
					case 41:	if (moveNext_41()) return true; break;
					case 42:	if (moveNext_42()) return true; break;
					case 43:	if (moveNext_43()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				var3_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_catalog, 1);
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "gtin")))) {state = 2; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "gtin")));
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "sku")))) {state = 4; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "sku")));
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "name")))) {state = 6; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "name")));
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "short_description")))) {state = 8; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "short_description")));
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 11;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "description")))) {state = 10; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "description")));
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 13;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "url_key")))) {state = 12; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "url_key")));
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 13;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 15;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "price")))) {state = 14; return false; }
				com.altova.db.Dbs.bindParameter_BigDecimal(var3_NewQuery, (java.math.BigDecimal)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "price")));
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 15;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 17;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "image")))) {state = 16; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "image")));
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 17;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 19;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "image_label")))) {state = 18; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "image_label")));
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 19;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 21;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "product_online")))) {state = 20; return false; }
				com.altova.db.Dbs.bindParameter_int(var3_NewQuery, (Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "product_online")));
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 21;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 23;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "visibility")))) {state = 22; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "visibility")));
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 23;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 25;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "attribute_set_code")))) {state = 24; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "attribute_set_code")));
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 25;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 27;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_color")))) {state = 26; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_color")));
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 27;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 29;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_size")))) {state = 28; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_size")));
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 29;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 31;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_fit")))) {state = 30; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_fit")));
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 31;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 33;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_gender")))) {state = 32; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_gender")));
				return false;
			}
			private boolean moveNext_32() throws Exception {
				state = 33;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_33() throws Exception {
				state = 35;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_brand")))) {state = 34; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "additional_attribute_brand")));
				return false;
			}
			private boolean moveNext_34() throws Exception {
				state = 35;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_35() throws Exception {
				state = 37;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "weight")))) {state = 36; return false; }
				com.altova.db.Dbs.bindParameter_BigDecimal(var3_NewQuery, (java.math.BigDecimal)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "weight")));
				return false;
			}
			private boolean moveNext_36() throws Exception {
				state = 37;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_37() throws Exception {
				state = 39;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "qty")))) {state = 38; return false; }
				com.altova.db.Dbs.bindParameter_int(var3_NewQuery, (Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "qty")));
				return false;
			}
			private boolean moveNext_38() throws Exception {
				state = 39;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_39() throws Exception {
				state = 41;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "source_input_name")))) {state = 40; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "source_input_name")));
				return false;
			}
			private boolean moveNext_40() throws Exception {
				state = 41;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_41() throws Exception {
				state = 43;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "source_input_id")))) {state = 42; return false; }
				com.altova.db.Dbs.bindParameter_int(var3_NewQuery, (Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "source_input_id")));
				return false;
			}
			private boolean moveNext_42() throws Exception {
				state = 43;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_43() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.notEqual(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.db.Dbs.executeNonReader(var3_NewQuery)))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(0))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class main_lambda implements com.altova.mapforce.SequenceFactory
	{
		com.altova.db.Catalog p1;

		public main_lambda(com.altova.db.Catalog _p1){ p1=_p1; }
		
		public Object invoke(Object o) { return new main((com.altova.db.Catalog)p1, (com.altova.db.Record) o); }	
	}
				
			}

			static void writeDB_products(com.altova.db.Record parent, com.altova.db.Record record, com.altova.db.Catalog target, com.altova.db.TransactionHelper transactionHelper) throws Exception
			{
				try
				{
					IEnumerable actionSequence = new Action_products.main(target, record);
					IEnumerator actionSequenceEnum = actionSequence.enumerator();
					actionSequenceEnum.moveNext();
					boolean bProcessChildren = (Boolean) actionSequenceEnum.current();
					
					if (bProcessChildren)
					{
					}
				}
				finally
				{
				}
			}

}
