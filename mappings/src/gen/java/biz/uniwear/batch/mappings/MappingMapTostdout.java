/**
 * MappingMapTostdout.java
 *
 * This file was generated by MapForce 2019.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package biz.uniwear.batch.mappings;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapTostdout extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public main(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var3_NewStatement;
			IEnumerator var2_item_at;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				var3_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_Batch__batch__Instance, 1, "SELECT `gtin` FROM `products`");
				com.altova.db.Dbs.prepareStatement(var3_NewStatement);
				var2_item_at = (com.altova.functions.Core.itemAt((new seq1_join(closure.var1_Batch__batch__Instance)), new java.math.BigInteger("1"))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 3;				
				if (!var2_item_at.moveNext()) {state = 4; return false; }
				current = var2_item_at.current();
				pos++;
				return true;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var2_item_at != null ) { var2_item_at.close(); var2_item_at = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_item_at != null ) { var2_item_at.close(); var2_item_at = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_join implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public seq1_join(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_join closure;
			IEnumerator var2_ReadRecordSet;
			IEnumerator var3_read_field;
			public Enumerator(seq1_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_ReadRecordSet = (com.altova.db.Dbs.readRecordSet((com.altova.db.ResultSetWrapper)com.altova.functions.Core.first((new seq2_NewQuery(closure.var1_Batch__batch__Instance))), (new seq3_NewRecord_lambda()))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_ReadRecordSet.moveNext()) {state = 3; return false; }
				var3_read_field = (com.altova.db.Dbs.readField(((com.altova.db.Record)(var2_ReadRecordSet.current())), "gtin")).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_ReadRecordSet != null ) { var2_ReadRecordSet.close(); var2_ReadRecordSet = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var3_read_field.moveNext()) {state = 5; return false; }
				current = var3_read_field.current();
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var3_read_field != null ) { var3_read_field.close(); var3_read_field = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_read_field != null ) { var3_read_field.close(); var3_read_field = null; }
				if( var2_ReadRecordSet != null ) { var2_ReadRecordSet.close(); var2_ReadRecordSet = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_NewQuery implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public seq2_NewQuery(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_NewQuery closure;
			com.altova.db.Statement var2_NewQuery;
			public Enumerator(seq2_NewQuery closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_Batch__batch__Instance, 1);
				current = com.altova.db.Dbs.executeQuery(var2_NewQuery);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				com.altova.db.Dbs.disposeQuery(var2_NewQuery);
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_NewRecord implements IEnumerable
	{
		com.altova.db.ResultSetWrapper var1_RecordSet;
	
		public seq3_NewRecord(com.altova.db.ResultSetWrapper var1_RecordSet)
		{
			this.var1_RecordSet = var1_RecordSet;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq3_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.MySQL.read_String(var2_NewRecord, closure.var1_RecordSet, "gtin", 0);
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class seq3_NewRecord_lambda implements com.altova.mapforce.SequenceFactory
	{

		public seq3_NewRecord_lambda(){}
		
		public Object invoke(Object o) { return new seq3_NewRecord((com.altova.db.ResultSetWrapper) o); }	
	}
	static class Outer implements IEnumerable
	{
		com.altova.db.Catalog var1_Batch__batch__Instance;
	
		public Outer(com.altova.db.Catalog var1_Batch__batch__Instance)
		{
			this.var1_Batch__batch__Instance = var1_Batch__batch__Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_item_at;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_item_at = ((new main(closure.var1_Batch__batch__Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_item_at.moveNext()) {state = 3; return false; }
				current = var2_item_at.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_item_at != null ) { var2_item_at.close(); var2_item_at = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_item_at != null ) { var2_item_at.close(); var2_item_at = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected java.sql.Connection varBatch2Instance;


	// main entry point

	public String run(java.sql.Connection Batch2SourceConnection) throws Exception {
		// Open the source(s)
		writeTrace("Connecting to Batch2 database...\n");
			
		varBatch2Instance = Batch2SourceConnection;
		

		// Create the target

		// Execute mapping

		main mapping = new main(new com.altova.db.Catalog(varBatch2Instance, 60));

		String varstdoutTargetParameter = com.altova.functions.Core.last(mapping).toString();
			
		// Close the target
		// Close the source
		com.altova.db.Dbs.closeConnection(varBatch2Instance);

		
		if (runDoesCloseAll)
		{
		}
		return varstdoutTargetParameter;
	}



}
