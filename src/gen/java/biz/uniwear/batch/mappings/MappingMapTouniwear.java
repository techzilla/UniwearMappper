/**
 * MappingMapTouniwear.java
 *
 * This file was generated by MapForce 2018r2sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package biz.uniwear.batch.mappings;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.db.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapTouniwear extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_InventorySPI_Instance;
	
		public main(com.altova.mapforce.IMFNode var1_InventorySPI_Instance)
		{
			this.var1_InventorySPI_Instance = var1_InventorySPI_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = (com.altova.db.Record)com.altova.functions.Core.first((new seq1_NewRecord(closure.var1_InventorySPI_Instance)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_NewRecord implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_InventorySPI_Instance;
	
		public seq1_NewRecord(com.altova.mapforce.IMFNode var1_InventorySPI_Instance)
		{
			this.var1_InventorySPI_Instance = var1_InventorySPI_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
			public Enumerator(seq1_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				var3_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Rows", closure.var1_InventorySPI_Instance));
				com.altova.db.Dbs.addChildren(var2_NewRecord, "products|0", (new seq2_map(var3_filter_elements_nodename)));
				com.altova.db.Dbs.addChildren(var2_NewRecord, "supplierinventory|0", com.altova.functions.Core.box((com.altova.db.Record)com.altova.functions.Core.first((new seq19_NewRecord(var3_filter_elements_nodename)))));
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq2_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq2_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq2_map closure;
			IEnumerator var2_filter_elements_nodename;
			com.altova.db.Record var3_NewRecord;
			com.altova.mapforce.IEnumerable var4_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var5_filter_elements_nodename;
			com.altova.mapforce.IEnumerable var6_filter_elements_nodename;
			public Enumerator(seq2_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var3_NewRecord = com.altova.db.Dbs.newRecord();
				var4_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("MAP Price", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				var5_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Size", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				var6_filter_elements_nodename = new com.altova.functions.Core.SequenceCache(com.altova.functions.Core.filterElements("Brand", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "sku", (new seq3_join(var5_filter_elements_nodename, ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())), var6_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var3_NewRecord, "gtin", (new seq4_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "type", (new seq5_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "color", (new seq6_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "color_type", (new seq7_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "size", (new seq8_map(var5_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var3_NewRecord, "gender", (new seq9_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "price", (new seq10_join(var4_filter_elements_nodename, ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "map", (new seq12_map(var4_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var3_NewRecord, "weight", (new seq13_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "brand", (new seq14_map(var6_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var3_NewRecord, "collection", (new seq15_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "title", (new seq16_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "description", (new seq17_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				com.altova.db.Dbs.writeField(var3_NewRecord, "image", (new seq18_map(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))));
				current = var3_NewRecord;
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq3_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IMFNode var2_cur;
		com.altova.mapforce.IEnumerable var3_filter_elements_nodename;
	
		public seq3_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IMFNode var2_cur, com.altova.mapforce.IEnumerable var3_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_cur = var2_cur;
			this.var3_filter_elements_nodename = var3_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq3_join closure;
			IEnumerator var4_filter_elements_nodename;
			IEnumerator var5_filter;
			IEnumerator var6_filter;
			IEnumerator var7_filter_elements_nodename;
			public Enumerator(seq3_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var4_filter_elements_nodename = (closure.var3_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var4_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var5_filter = (com.altova.functions.Core.filterElements("Style", closure.var2_cur)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var4_filter_elements_nodename != null ) { var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 6;				
				if (!var5_filter.moveNext()) {state = 5; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("Color", closure.var2_cur)))) {state = 4; return false; }
				var6_filter = (com.altova.functions.Core.filterElements("Color", closure.var2_cur)).enumerator();
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var5_filter != null ) { var5_filter.close(); var5_filter = null; }
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 8;				
				if (!var6_filter.moveNext()) {state = 7; return false; }
				if (!(com.altova.functions.Core.exists(closure.var1_filter_elements_nodename))) {state = 6; return false; }
				var7_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 4;				
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 8;				
				if (!var7_filter_elements_nodename.moveNext()) {state = 9; return false; }
				current = com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(biz.uniwear.batch.mappings.vmf.vmf1_inputtoresult.eval(com.altova.functions.Lang.lowercase(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current()))))), "-"), com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var5_filter.current())))), "-"), com.altova.functions.Lang.rightTrim(com.altova.functions.Lang.leftTrim(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var6_filter.current())))))), "-"), com.altova.functions.Lang.rightTrim(com.altova.functions.Lang.leftTrim(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var7_filter_elements_nodename.current()))))));
				pos++;
				return true;
			}
			private boolean moveNext_9() throws Exception {
				state = 6;				
				if( var7_filter_elements_nodename != null ) { var7_filter_elements_nodename.close(); var7_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var7_filter_elements_nodename != null ) { var7_filter_elements_nodename.close(); var7_filter_elements_nodename = null; }
				if( var6_filter != null ) { var6_filter.close(); var6_filter = null; }
				if( var5_filter != null ) { var5_filter.close(); var5_filter = null; }
				if( var4_filter_elements_nodename != null ) { var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq4_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq4_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq4_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq4_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("UPC", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.functions.Core.translate(com.altova.functions.Core.FormatNumber(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.parseInteger(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))))), "##############"), ".,", com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(biz.uniwear.batch.mappings.core.firstCharacter.eval(".", ".")), (java.lang.String)com.altova.functions.Core.first(biz.uniwear.batch.mappings.core.firstCharacter.eval(",", ","))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq5_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq5_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq5_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq5_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Garment Type", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq6_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq6_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq6_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq6_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Color Description", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq7_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq7_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq7_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq7_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Color Type", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq8_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq8_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq8_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq8_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq9_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq9_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq9_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq9_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Gender", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = biz.uniwear.batch.mappings.vmf.vmf2_inputtoresult.eval(com.altova.functions.Lang.lowercase(com.altova.functions.Lang.rightTrim(com.altova.functions.Lang.leftTrim(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq10_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
		com.altova.mapforce.IMFNode var2_cur;
	
		public seq10_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename, com.altova.mapforce.IMFNode var2_cur)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
			this.var2_cur = var2_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq10_join closure;
			IEnumerator var3_filter_elements_nodename;
			IEnumerator var4_filter_elements_nodename;
			java.math.BigDecimal var5_cast;
			public Enumerator(seq10_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Price ", closure.var2_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var4_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var4_filter_elements_nodename.moveNext()) {state = 5; return false; }
				var5_cast = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_filter_elements_nodename.current()))));
				current = com.altova.CoreTypes.parseDecimal((java.lang.String)com.altova.functions.Core.first((new seq11_if_greater(((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current())), var5_cast))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var4_filter_elements_nodename != null ) { var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var4_filter_elements_nodename != null ) { var4_filter_elements_nodename.close(); var4_filter_elements_nodename = null; }
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq11_if_greater implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
		java.math.BigDecimal var2_cast;
	
		public seq11_if_greater(com.altova.mapforce.IMFNode var1_cur, java.math.BigDecimal var2_cast)
		{
			this.var1_cur = var1_cur;
			this.var2_cast = var2_cast;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq11_if_greater closure;
			public Enumerator(seq11_if_greater closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				if (!(com.altova.functions.Core.greater(com.altova.functions.Core.multiply(com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(closure.var1_cur)), new java.math.BigDecimal("0.50")), closure.var2_cast))) {state = 2; return false; }
				current = com.altova.CoreTypes.booleanToString(com.altova.CoreTypes.parseBoolean("true"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.CoreTypes.decimalToString(closure.var2_cast);
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq12_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq12_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq12_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq12_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq13_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq13_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq13_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq13_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Unit Weight", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq14_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq14_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq14_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq14_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq15_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq15_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq15_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq15_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Collection", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq16_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq16_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq16_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq16_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Short Description", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq17_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq17_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq17_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq17_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Full Description", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq18_map implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_cur;
	
		public seq18_map(com.altova.mapforce.IMFNode var1_cur)
		{
			this.var1_cur = var1_cur;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq18_map closure;
			IEnumerator var2_filter_elements_nodename;
			public Enumerator(seq18_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Product Shot", closure.var1_cur)).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				current = com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())));
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq19_NewRecord implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq19_NewRecord(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq19_NewRecord closure;
			com.altova.db.Record var2_NewRecord;
			public Enumerator(seq19_NewRecord closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewRecord = com.altova.db.Dbs.newRecord();
				com.altova.db.Dbs.writeField(var2_NewRecord, "gtin", (new seq20_map(closure.var1_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var2_NewRecord, "supplier", com.altova.functions.Core.box("SPI"));
				com.altova.db.Dbs.writeField(var2_NewRecord, "price", (new seq22_map(closure.var1_filter_elements_nodename)));
				com.altova.db.Dbs.writeField(var2_NewRecord, "stock", (new seq24_map(closure.var1_filter_elements_nodename)));
				current = var2_NewRecord;
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq20_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq20_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq20_map closure;
			IEnumerator var2_join;
			public Enumerator(seq20_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_join = ((new seq21_join(closure.var1_filter_elements_nodename))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_join.moveNext()) {state = 3; return false; }
				current = var2_join.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq21_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq21_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq21_join closure;
			IEnumerator var2_filter_elements_nodename;
			IEnumerator var3_filter_elements_nodename;
			public Enumerator(seq21_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("UPC", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 5; return false; }
				current = com.altova.functions.Core.translate(com.altova.functions.Core.FormatNumber(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.parseInteger(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))))), "##############"), ".,", com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(biz.uniwear.batch.mappings.core.firstCharacter.eval(".", ".")), (java.lang.String)com.altova.functions.Core.first(biz.uniwear.batch.mappings.core.firstCharacter.eval(",", ","))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq22_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq22_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq22_map closure;
			IEnumerator var2_join;
			public Enumerator(seq22_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_join = ((new seq23_join(closure.var1_filter_elements_nodename))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_join.moveNext()) {state = 3; return false; }
				current = var2_join.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq23_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq23_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq23_join closure;
			IEnumerator var2_filter_elements_nodename;
			IEnumerator var3_filter_elements_nodename;
			public Enumerator(seq23_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Price ", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 5; return false; }
				current = com.altova.CoreTypes.parseDecimal(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq24_map implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq24_map(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq24_map closure;
			IEnumerator var2_join;
			public Enumerator(seq24_map closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_join = ((new seq25_join(closure.var1_filter_elements_nodename))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_join.moveNext()) {state = 3; return false; }
				current = var2_join.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_join != null ) { var2_join.close(); var2_join = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq25_join implements IEnumerable
	{
		com.altova.mapforce.IEnumerable var1_filter_elements_nodename;
	
		public seq25_join(com.altova.mapforce.IEnumerable var1_filter_elements_nodename)
		{
			this.var1_filter_elements_nodename = var1_filter_elements_nodename;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq25_join closure;
			IEnumerator var2_filter_elements_nodename;
			IEnumerator var3_filter_elements_nodename;
			public Enumerator(seq25_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_filter_elements_nodename = (closure.var1_filter_elements_nodename).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 4;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 3; return false; }
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Availability", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 4;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 5; return false; }
				current = com.altova.CoreTypes.longToInt(com.altova.CoreTypes.integerToLong(com.altova.CoreTypes.decimalToInteger(com.altova.CoreTypes.parseDecimal(com.altova.functions.Lang.replace(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))), "+", "")))));
				pos++;
				return true;
			}
			private boolean moveNext_5() throws Exception {
				state = 2;				
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_InventorySPI_Instance;
	
		public Outer(com.altova.mapforce.IMFNode var1_InventorySPI_Instance)
		{
			this.var1_InventorySPI_Instance = var1_InventorySPI_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_InventorySPI_Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.tablelike.Table varInventorySPI2Instance;
		com.altova.db.TransactionHelper transactionHelper;

	public void run(String InventorySPI2SourceFilename, java.sql.Connection uniwearTargetConnection) throws Exception {
		// open source streams
		writeTrace("Loading " + InventorySPI2SourceFilename + "...\n");
		com.altova.io.FileInput InventorySPI2Source = new com.altova.io.FileInput(InventorySPI2SourceFilename);

		// run
	
		run(InventorySPI2Source, uniwearTargetConnection);

		// close source streams
		InventorySPI2Source.close();
	}


	// main entry point

	public void run(com.altova.io.Input InventorySPI2Source, java.sql.Connection uniwearTargetConnection) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.altova.text.tablelike.csv.Table InventorySPI2InstanceObject = new com.altova.text.tablelike.csv.Table(biz.uniwear.batch.mappings.InventorySPI.InventorySPI_TypeInfo.binder.getTypes()[biz.uniwear.batch.mappings.InventorySPI.InventorySPI_TypeInfo._altova_ti_altova_RowsType],0);
		varInventorySPI2Instance = InventorySPI2InstanceObject;
		com.altova.text.tablelike.Table InventorySPI2SourceObject = varInventorySPI2Instance;
			InventorySPI2InstanceObject.getFormat().setAssumeFirstRowAsHeaders( true );
			InventorySPI2InstanceObject.getFormat().setFieldDelimiter( ',' );
			InventorySPI2InstanceObject.getFormat().setRemoveEmpty( true );
			InventorySPI2InstanceObject.getFormat().setQuoteCharacter( '\"' );
		varInventorySPI2Instance.setEncoding( "UTF-8", false, false );
		varInventorySPI2Instance.parse(InventorySPI2Source);
		if (runDoesCloseAll)
			InventorySPI2Source.close();

		// Create the target

		writeTrace("Connecting to uniwear database...\n");
		{

		// Execute mapping

		main mapping = new main(new com.altova.text.TableAsMFNodeAdapter(varInventorySPI2Instance, InventorySPI2Source.getFilename()));

		writeDB(mapping, new com.altova.db.Catalog(uniwearTargetConnection, 60, true));
		// Close the target
		}

		writeTrace("Closing " + uniwearTargetConnection + ".\n");
		uniwearTargetConnection.close();

		
		if (runDoesCloseAll)
		{
			InventorySPI2Source.close();
		}
	}


		static class Setup
		{
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
	
		public main(com.altova.db.Catalog var1_catalog)
		{
			this.var1_catalog = var1_catalog;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var2_NewStatement;
			com.altova.db.Statement var3_NewStatement;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 0;				
				var2_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_catalog, 1, "INSERT INTO `products` (`sku`, `gtin`, `type`, `color`, `color_type`, `size`, `gender`, `price`, `map`, `weight`, `brand`, `collection`, `title`, `description`, `image`) VALUES (?, ?, ?, ?, ?, ?, ?, ?"
 + ", ?, ?, ?, ?, ?, ?, ?)");
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.DECIMAL,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.DECIMAL,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.DECIMAL,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var2_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.prepareStatement(var2_NewStatement);
				var3_NewStatement = com.altova.db.Dbs.newStatement(closure.var1_catalog, 2, "INSERT INTO `supplierinventory` (`gtin`, `supplier`, `price`, `stock`) VALUES (?, ?, ?, ?)");
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.CHAR,-1);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.DECIMAL,-1);
				com.altova.db.Dbs.addParameter(var3_NewStatement, java.sql.Types.INTEGER,-1);
				com.altova.db.Dbs.prepareStatement(var3_NewStatement);
				current = com.altova.CoreTypes.parseBoolean("true");
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
		
	static class main_lambda implements com.altova.mapforce.SequenceFactory
	{
		public main_lambda() {}
		
		public Object invoke(Object o) { return new main((com.altova.db.Catalog) o); }	
	}
	
		}

		static void writeDB(com.altova.mapforce.IEnumerable mapping, com.altova.db.Catalog target) throws Exception
		{
			IEnumerator mappingEnumerator = mapping.enumerator();
			mappingEnumerator.moveNext();
			com.altova.db.Record record = (com.altova.db.Record) mappingEnumerator.current();

			Setup.main setup = 
				new Setup.main(target);
			setup.enumerator().moveNext();

			com.altova.db.TransactionHelper transactionHelper = 
				new com.altova.db.TransactionHelper(
					target.getConnection(), 
					"", 
					"", 
					"", 
					"SAVEPOINT  %%TRANSACTION_NAME%% ", 
					"ROLLBACK TO SAVEPOINT  %%TRANSACTION_NAME%% "
				);

					IEnumerator products_en = record.children.get("products|0").enumerator();
					while(products_en.moveNext())
						writeDB_products(record, (com.altova.db.Record) products_en.current(), target, transactionHelper);				
					IEnumerator supplierinventory_en = record.children.get("supplierinventory|0").enumerator();
					while(supplierinventory_en.moveNext())
						writeDB_supplierinventory(record, (com.altova.db.Record) supplierinventory_en.current(), target, transactionHelper);				

		}

			static class Action_products
			{
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
		com.altova.db.Record var2_record;
	
		public main(com.altova.db.Catalog var1_catalog, com.altova.db.Record var2_record)
		{
			this.var1_catalog = var1_catalog;
			this.var2_record = var2_record;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var3_NewQuery;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 13:	if (moveNext_13()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
					case 16:	if (moveNext_16()) return true; break;
					case 17:	if (moveNext_17()) return true; break;
					case 18:	if (moveNext_18()) return true; break;
					case 19:	if (moveNext_19()) return true; break;
					case 20:	if (moveNext_20()) return true; break;
					case 21:	if (moveNext_21()) return true; break;
					case 22:	if (moveNext_22()) return true; break;
					case 23:	if (moveNext_23()) return true; break;
					case 24:	if (moveNext_24()) return true; break;
					case 25:	if (moveNext_25()) return true; break;
					case 26:	if (moveNext_26()) return true; break;
					case 27:	if (moveNext_27()) return true; break;
					case 28:	if (moveNext_28()) return true; break;
					case 29:	if (moveNext_29()) return true; break;
					case 30:	if (moveNext_30()) return true; break;
					case 31:	if (moveNext_31()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				var3_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_catalog, 1);
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "sku")))) {state = 2; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "sku")));
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "gtin")))) {state = 4; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "gtin")));
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "type")))) {state = 6; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "type")));
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "color")))) {state = 8; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "color")));
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 11;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "color_type")))) {state = 10; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "color_type")));
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 11;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 13;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "size")))) {state = 12; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "size")));
				return false;
			}
			private boolean moveNext_12() throws Exception {
				state = 13;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_13() throws Exception {
				state = 15;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "gender")))) {state = 14; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "gender")));
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 15;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_15() throws Exception {
				state = 17;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "price")))) {state = 16; return false; }
				com.altova.db.Dbs.bindParameter_BigDecimal(var3_NewQuery, (java.math.BigDecimal)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "price")));
				return false;
			}
			private boolean moveNext_16() throws Exception {
				state = 17;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_17() throws Exception {
				state = 19;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "map")))) {state = 18; return false; }
				com.altova.db.Dbs.bindParameter_BigDecimal(var3_NewQuery, (java.math.BigDecimal)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "map")));
				return false;
			}
			private boolean moveNext_18() throws Exception {
				state = 19;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_19() throws Exception {
				state = 21;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "weight")))) {state = 20; return false; }
				com.altova.db.Dbs.bindParameter_BigDecimal(var3_NewQuery, (java.math.BigDecimal)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "weight")));
				return false;
			}
			private boolean moveNext_20() throws Exception {
				state = 21;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_21() throws Exception {
				state = 23;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "brand")))) {state = 22; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "brand")));
				return false;
			}
			private boolean moveNext_22() throws Exception {
				state = 23;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_23() throws Exception {
				state = 25;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "collection")))) {state = 24; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "collection")));
				return false;
			}
			private boolean moveNext_24() throws Exception {
				state = 25;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_25() throws Exception {
				state = 27;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "title")))) {state = 26; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "title")));
				return false;
			}
			private boolean moveNext_26() throws Exception {
				state = 27;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_27() throws Exception {
				state = 29;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "description")))) {state = 28; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "description")));
				return false;
			}
			private boolean moveNext_28() throws Exception {
				state = 29;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_29() throws Exception {
				state = 31;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "image")))) {state = 30; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "image")));
				return false;
			}
			private boolean moveNext_30() throws Exception {
				state = 31;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_31() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.notEqual(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.db.Dbs.executeNonReader(var3_NewQuery)))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(0))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
				
			}

			static void writeDB_products(com.altova.db.Record parent, 
				com.altova.db.Record record, 
				com.altova.db.Catalog target, 
				com.altova.db.TransactionHelper transactionHelper
				) throws Exception
			{
				target.getConnection().setAutoCommit(true);
				IEnumerable actionSequence = new Action_products.main(target, 
					record);
				IEnumerator actionSequenceEnum = actionSequence.enumerator();
				actionSequenceEnum.moveNext();
				boolean bProcessChildren = (Boolean) actionSequenceEnum.current();
				
				if (bProcessChildren)
				{					
				}
			}
			static class Action_supplierinventory
			{
	static class main implements IEnumerable
	{
		com.altova.db.Catalog var1_catalog;
		com.altova.db.Record var2_record;
	
		public main(com.altova.db.Catalog var1_catalog, com.altova.db.Record var2_record)
		{
			this.var1_catalog = var1_catalog;
			this.var2_record = var2_record;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			main closure;
			com.altova.db.Statement var3_NewQuery;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 3;				
				var3_NewQuery = com.altova.db.Dbs.newQuery(closure.var1_catalog, 2);
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "gtin")))) {state = 2; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "gtin")));
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "supplier")))) {state = 4; return false; }
				com.altova.db.Dbs.bindParameter_String(var3_NewQuery, (java.lang.String)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "supplier")));
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 5;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "price")))) {state = 6; return false; }
				com.altova.db.Dbs.bindParameter_BigDecimal(var3_NewQuery, (java.math.BigDecimal)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "price")));
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 7;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!(com.altova.functions.Core.exists(com.altova.db.Dbs.readField(closure.var2_record, "stock")))) {state = 8; return false; }
				com.altova.db.Dbs.bindParameter_int(var3_NewQuery, (Integer)com.altova.functions.Core.first(com.altova.db.Dbs.readField(closure.var2_record, "stock")));
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 9;				
				com.altova.db.Dbs.bindParameter_empty(var3_NewQuery);
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.notEqual(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(com.altova.db.Dbs.executeNonReader(var3_NewQuery)))), com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.longToInteger(com.altova.CoreTypes.intToLong(0))));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
				
			}

			static void writeDB_supplierinventory(com.altova.db.Record parent, 
				com.altova.db.Record record, 
				com.altova.db.Catalog target, 
				com.altova.db.TransactionHelper transactionHelper
				) throws Exception
			{
				target.getConnection().setAutoCommit(true);
				IEnumerable actionSequence = new Action_supplierinventory.main(target, 
					record);
				IEnumerator actionSequenceEnum = actionSequence.enumerator();
				actionSequenceEnum.moveNext();
				boolean bProcessChildren = (Boolean) actionSequenceEnum.current();
				
				if (bProcessChildren)
				{					
				}
			}

}
