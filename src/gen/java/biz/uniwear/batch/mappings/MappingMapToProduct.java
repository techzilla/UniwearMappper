/**
 * MappingMapToProduct.java
 *
 * This file was generated by MapForce 2018r2sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */
package biz.uniwear.batch.mappings;
import com.altova.mapforce.*;
import com.altova.types.*;
import com.altova.xml.*;
import com.altova.text.tablelike.*;
import com.altova.text.*;
import com.altova.text.edi.*;
import java.util.*;

public class MappingMapToProduct extends com.altova.TraceProvider 
{
	private boolean runDoesCloseAll = true;
	public void setCloseObjectsAfterRun(boolean c) {runDoesCloseAll = c;}
	public boolean getCloseObjectsAfterRun() {return runDoesCloseAll;}

	
	static class main implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_InventorySPI_Instance;
	
		public main(com.altova.mapforce.IMFNode var1_InventorySPI_Instance)
		{
			this.var1_InventorySPI_Instance = var1_InventorySPI_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 2;
			Object current;
			main closure;
			public Enumerator(main closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 2:	if (moveNext_2()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_2() throws Exception {
				state = 0;				
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("products", ""), (new seq1_join(closure.var1_InventorySPI_Instance)));
				pos++;
				return true;
			}

			
			public void close()
			{
				try
				{
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class seq1_join implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_InventorySPI_Instance;
	
		public seq1_join(com.altova.mapforce.IMFNode var1_InventorySPI_Instance)
		{
			this.var1_InventorySPI_Instance = var1_InventorySPI_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			seq1_join closure;
			IEnumerator var2_filter_elements_nodename;
			IEnumerator var3_filter_elements_nodename;
			IEnumerator var4_filter;
			IEnumerator var7_filter_elements_nodename;
			IEnumerator var5_filter;
			IEnumerator var6_filter_elements_nodename;
			public Enumerator(seq1_join closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
					case 4:	if (moveNext_4()) return true; break;
					case 5:	if (moveNext_5()) return true; break;
					case 6:	if (moveNext_6()) return true; break;
					case 7:	if (moveNext_7()) return true; break;
					case 8:	if (moveNext_8()) return true; break;
					case 9:	if (moveNext_9()) return true; break;
					case 10:	if (moveNext_10()) return true; break;
					case 11:	if (moveNext_11()) return true; break;
					case 12:	if (moveNext_12()) return true; break;
					case 14:	if (moveNext_14()) return true; break;
					case 15:	if (moveNext_15()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				current = com.altova.functions.Core.createAttribute(com.altova.functions.Core.createQName("xsi:noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), com.altova.functions.Core.box("file:///C:/Users/User/Projects/batch/mappings/project/Mappings/schema/Product.xsd"));
				pos++;
				return true;
			}
			private boolean moveNext_2() throws Exception {
				state = 3;				
				var2_filter_elements_nodename = (com.altova.functions.Core.filterElements("Rows", closure.var1_InventorySPI_Instance)).enumerator();
				return false;
			}
			private boolean moveNext_3() throws Exception {
				state = 5;				
				if (!var2_filter_elements_nodename.moveNext()) {state = 4; return false; }
				var3_filter_elements_nodename = (com.altova.functions.Core.filterElements("Brand", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_4() throws Exception {
				state = 0;				
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				return false;
			}
			private boolean moveNext_5() throws Exception {
				state = 7;				
				if (!var3_filter_elements_nodename.moveNext()) {state = 6; return false; }
				var4_filter = (com.altova.functions.Core.filterElements("Style", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_6() throws Exception {
				state = 14;				
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				var7_filter_elements_nodename = (com.altova.functions.Core.filterElements("UPC", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_7() throws Exception {
				state = 9;				
				if (!var4_filter.moveNext()) {state = 8; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("Color", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))) {state = 7; return false; }
				var5_filter = (com.altova.functions.Core.filterElements("Color", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_8() throws Exception {
				state = 5;				
				if( var4_filter != null ) { var4_filter.close(); var4_filter = null; }
				return false;
			}
			private boolean moveNext_9() throws Exception {
				state = 11;				
				if (!var5_filter.moveNext()) {state = 10; return false; }
				if (!(com.altova.functions.Core.exists(com.altova.functions.Core.filterElements("Size", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))))) {state = 9; return false; }
				var6_filter_elements_nodename = (com.altova.functions.Core.filterElements("Size", ((com.altova.mapforce.IMFNode)(var2_filter_elements_nodename.current())))).enumerator();
				return false;
			}
			private boolean moveNext_10() throws Exception {
				state = 7;				
				if( var5_filter != null ) { var5_filter.close(); var5_filter = null; }
				return false;
			}
			private boolean moveNext_11() throws Exception {
				state = 11;				
				if (!var6_filter_elements_nodename.moveNext()) {state = 12; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("sku", ""), com.altova.functions.Core.box(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(com.altova.functions.Core.concat(biz.uniwear.batch.mappings.vmf.vmf1_inputtoresult.eval(com.altova.functions.Lang.lowercase(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var3_filter_elements_nodename.current()))))), "-"), com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var4_filter.current())))), "-"), com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var5_filter.current())))), "-"), com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var6_filter_elements_nodename.current()))))));
				pos++;
				return true;
			}
			private boolean moveNext_12() throws Exception {
				state = 9;				
				if( var6_filter_elements_nodename != null ) { var6_filter_elements_nodename.close(); var6_filter_elements_nodename = null; }
				return false;
			}
			private boolean moveNext_14() throws Exception {
				state = 14;				
				if (!var7_filter_elements_nodename.moveNext()) {state = 15; return false; }
				current = com.altova.functions.Core.createElement(com.altova.functions.Core.createQName("gtin", ""), com.altova.functions.Core.box(com.altova.functions.Core.translate(com.altova.functions.Core.FormatNumber(com.altova.CoreTypes.integerToDecimal(com.altova.CoreTypes.parseInteger(com.altova.CoreTypes.nodeToString(((com.altova.mapforce.IMFNode)(var7_filter_elements_nodename.current()))))), "##############"), ".,", com.altova.functions.Core.concat((java.lang.String)com.altova.functions.Core.first(biz.uniwear.batch.mappings.core.firstCharacter.eval(".", ".")), (java.lang.String)com.altova.functions.Core.first(biz.uniwear.batch.mappings.core.firstCharacter.eval(",", ","))))));
				pos++;
				return true;
			}
			private boolean moveNext_15() throws Exception {
				state = 3;				
				if( var7_filter_elements_nodename != null ) { var7_filter_elements_nodename.close(); var7_filter_elements_nodename = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var6_filter_elements_nodename != null ) { var6_filter_elements_nodename.close(); var6_filter_elements_nodename = null; }
				if( var5_filter != null ) { var5_filter.close(); var5_filter = null; }
				if( var4_filter != null ) { var4_filter.close(); var4_filter = null; }
				if( var3_filter_elements_nodename != null ) { var3_filter_elements_nodename.close(); var3_filter_elements_nodename = null; }
				if( var7_filter_elements_nodename != null ) { var7_filter_elements_nodename.close(); var7_filter_elements_nodename = null; }
				if( var2_filter_elements_nodename != null ) { var2_filter_elements_nodename.close(); var2_filter_elements_nodename = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}
	static class Outer implements IEnumerable
	{
		com.altova.mapforce.IMFNode var1_InventorySPI_Instance;
	
		public Outer(com.altova.mapforce.IMFNode var1_InventorySPI_Instance)
		{
			this.var1_InventorySPI_Instance = var1_InventorySPI_Instance;
		}

		public IEnumerator enumerator() {return new Enumerator(this);}
		
		public static class Enumerator implements IEnumerator
		{
			int pos = 0;
			int state = 1;
			Object current;
			Outer closure;
			IEnumerator var2_box;
			public Enumerator(Outer closure) 
			{
				this.closure = closure;
			}
			
			public Object current() {return current;}
			
			public int position() {return pos;}
			
			public boolean moveNext() throws Exception
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:	if (moveNext_1()) return true; break;
					case 2:	if (moveNext_2()) return true; break;
					case 3:	if (moveNext_3()) return true; break;
 					}
				}
				return false;
			}

			private boolean moveNext_1() throws Exception {
				state = 2;				
				var2_box = ((new main(closure.var1_InventorySPI_Instance))).enumerator();
				return false;
			}
			private boolean moveNext_2() throws Exception {
				state = 2;				
				if (!var2_box.moveNext()) {state = 3; return false; }
				current = var2_box.current();
				pos++;
				return true;
			}
			private boolean moveNext_3() throws Exception {
				state = 0;				
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				return false;
			}

			
			public void close()
			{
				try
				{
				if( var2_box != null ) { var2_box.close(); var2_box = null; }
				}
				catch (Exception e)
				{
				}
			}
		}
				
	}



	// instances
	protected com.altova.text.tablelike.Table varInventorySPI2Instance;

	public void run(String InventorySPI2SourceFilename, String Product2TargetFilename) throws Exception {
		// open source streams
		writeTrace("Loading " + InventorySPI2SourceFilename + "...\n");
		com.altova.io.FileInput InventorySPI2Source = new com.altova.io.FileInput(InventorySPI2SourceFilename);
		// open target stream
		com.altova.io.FileOutput Product2Target = new com.altova.io.FileOutput(Product2TargetFilename);

		// run
	
		run(InventorySPI2Source, Product2Target);

		// close source streams
		InventorySPI2Source.close();
		// close target stream
		writeTrace("Saving " + Product2TargetFilename + "...\n");
		Product2Target.close();
	}


	// main entry point

	public void run(com.altova.io.Input InventorySPI2Source, com.altova.io.Output Product2Target) throws Exception {
		// Open the source(s)
		writeTrace("Parsing Text...\n");
		com.altova.text.tablelike.csv.Table InventorySPI2InstanceObject = new com.altova.text.tablelike.csv.Table(biz.uniwear.batch.mappings.InventorySPI.InventorySPI_TypeInfo.binder.getTypes()[biz.uniwear.batch.mappings.InventorySPI.InventorySPI_TypeInfo._altova_ti_altova_RowsType],0);
		varInventorySPI2Instance = InventorySPI2InstanceObject;
		com.altova.text.tablelike.Table InventorySPI2SourceObject = varInventorySPI2Instance;
			InventorySPI2InstanceObject.getFormat().setAssumeFirstRowAsHeaders( true );
			InventorySPI2InstanceObject.getFormat().setFieldDelimiter( ',' );
			InventorySPI2InstanceObject.getFormat().setRemoveEmpty( true );
			InventorySPI2InstanceObject.getFormat().setQuoteCharacter( '\"' );
		varInventorySPI2Instance.setEncoding( "UTF-8", false, false );
		varInventorySPI2Instance.parse(InventorySPI2Source);
		if (runDoesCloseAll)
			InventorySPI2Source.close();

		// Create the target
		org.w3c.dom.Document Product2Doc = (Product2Target.getType() == com.altova.io.Output.IO_DOM) ? Product2Target.getDocument() : XmlTreeOperations.createDocument();

		// Execute mapping

		main mapping = new main(new com.altova.text.TableAsMFNodeAdapter(varInventorySPI2Instance, InventorySPI2Source.getFilename()));

		com.altova.xml.MFDOMWriter.write(mapping, Product2Doc);
		// Close the target
		XmlTreeOperations.saveDocument(Product2Doc, Product2Target, "UTF-8", false, false, true, false);

		
		if (runDoesCloseAll)
		{
			InventorySPI2Source.close();
			Product2Target.close();
		}
	}



}
