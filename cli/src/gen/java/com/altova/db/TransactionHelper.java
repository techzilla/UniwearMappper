/**
 * TransactionHelper.java
 *
 * This file was generated by MapForce 2018r2sp1.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the MapForce Documentation for further details.
 * http://www.altova.com/mapforce
 */

 package com.altova.db;

import java.sql.Connection;
import java.sql.PreparedStatement;

public class TransactionHelper
{
	String beginTrans;
	String commitTrans;
	String rollbackTrans;
	String setSavepoint;
	String rollbackSavepoint;
	Connection connection;
	int depth;

	public TransactionHelper(Connection conne, String begin, String commit,	String rollback, String save, String rollbackSave)
	{
		connection = conne;
		beginTrans = begin;
		commitTrans = commit;
		rollbackTrans = rollback;
		setSavepoint = save;
		rollbackSavepoint = rollbackSave;
		depth = 0;
	}
	
	private void executeCommandString(String s) throws java.sql.SQLException
	{
		PreparedStatement statement = connection.prepareStatement(s);
		try
		{
			statement.execute();
		}
		finally
		{
			statement.close();
		}
	}
	
	private void executeCommandString(String s, String replaceName) throws java.sql.SQLException
	{
		int i = s.indexOf(" %%TRANSACTION_NAME%% ");
		if (i == -1)
			executeCommandString(s);
		else
			executeCommandString(s.substring(0, i) + replaceName + s.substring(i+22, s.length()));
	}
	
	public void beginTrans(String transName) throws java.sql.SQLException
	{
		// System.out.println("TransHelper: beginning trans \"" + transName + "\""); 
		if (depth == 0)
		{
			try { connection.setAutoCommit(false); }
			catch (java.sql.SQLException e) { }
			
			if (beginTrans.length() != 0 && connection.getAutoCommit() == true)
				executeCommandString(beginTrans);
		}
		else
		{
			if (setSavepoint.length() != 0)
				executeCommandString(setSavepoint, transName);
		}
		++depth;
	}
	
	public void commitTrans() throws java.sql.SQLException
	{
		// System.out.println("TransHelper: commiting ");
		--depth;
		if (depth == 0)
		{
			connection.commit();
		}
	}
	
	public void rollbackTrans(String transName)  throws java.sql.SQLException
	{
		// System.err.println("TransHelper: rolling back \"" + transName + "\"");
		--depth;
		if (depth == 0)
		{
			connection.rollback();
		}
		else
		{
			if (rollbackSavepoint.length() != 0)
				executeCommandString(rollbackSavepoint, transName);
		}
	}
}
